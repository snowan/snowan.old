<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Snowan Blog</title>
    <link>https://snowan.github.io/</link>
    <description>Recent content on Snowan Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://snowan.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>460 LFU Cache 解题报告</title>
      <link>https://snowan.github.io/post/460.lfu-cache/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/460.lfu-cache/</guid>
      <description>题目地址 Problem 题目描述 Design and implement a data structure for Least Frequently Used (LFU) cache. It should support the following operations: get and put. get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. put(key, value) - Set or insert the value if the key is not already present. When the cache</description>
    </item>
    
    <item>
      <title>日语基础学习(五) - 单词</title>
      <link>https://snowan.github.io/post/japanese-words-basic/</link>
      <pubDate>Sun, 28 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/japanese-words-basic/</guid>
      <description>#日语基础学习(五) - 单词 (日本金阁寺/鹿苑寺(ろくおんじ), 图片来源维基百科) 「鹿苑寺(ろくおんじ)最早完成于1397年日本佛寺, 位于京都</description>
    </item>
    
    <item>
      <title>日语基础学习(四) - 人称的表达和词语学习</title>
      <link>https://snowan.github.io/post/japanese-person-basic/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/japanese-person-basic/</guid>
      <description>日语学习基础(四) - 词语的表达和使用方式 本周继续Youtube视频日语基础学习, 发现学完基础后, 结合Memrise 和 Duolingo 单词记忆。 一, 人称(に</description>
    </item>
    
    <item>
      <title>二叉树遍历(Binary Tree Traversal)-先序,中序,后序,层级遍历</title>
      <link>https://snowan.github.io/post/tree-traversal/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/tree-traversal/</guid>
      <description>二叉树遍历(Binary Tree Traversal) - 先序, 中序, 后序, 层级遍历 与那些基本上都有标准遍历方式的线性数据结构(如链表, 一维数组)不同的是, 树结构有多种</description>
    </item>
    
    <item>
      <title>并查集(Union Find Algorithm)</title>
      <link>https://snowan.github.io/post/union-find/</link>
      <pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/union-find/</guid>
      <description>并查集 (Union Find) 算法 这几天重温一下union-find算法, 重温 《算法》(Algorithms) 这本书union find 一小节, 写一篇学习笔记, 然后结合</description>
    </item>
    
    <item>
      <title>Leetcode 926 Flip String to Monotone Increasing 解题分析</title>
      <link>https://snowan.github.io/post/lc926/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/lc926/</guid>
      <description>Leetcode 926 Flip String to Monotone Increasing 解题分析 题目(Problem) A string of &#39;0&#39;s and &#39;1&#39;s is monotone increasing if it consists of some number of &#39;0&#39;s (possibly 0), followed by some number of &#39;1&#39;s (also possibly 0.) We are given a string S of &#39;0&#39;s and &#39;1&#39;s, and we may flip any &#39;0&#39; to a &#39;1&#39; or</description>
    </item>
    
    <item>
      <title>日语基础(一)</title>
      <link>https://snowan.github.io/post/japanese-basic/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/japanese-basic/</guid>
      <description>一直听说日本的各种传奇, 看过宫崎骏, 新海诚等的系列动画片, 最近看完日版legal high, 读了村上春树, 东野圭吾, 川端康成的书籍, 想要体会原著的魅力</description>
    </item>
    
    <item>
      <title>Leetcode 465 Optimal Account Balancing 解题报告</title>
      <link>https://snowan.github.io/post/lc465/</link>
      <pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/lc465/</guid>
      <description>Leetcode 465 Optimal Account Balancing 解题报告 题目 (Problem) A group of friends went on holiday and sometimes lent each other money. For example, Alice paid for Bill&amp;rsquo;s lunch for $10. Then later Chris gave Alice $5 for a taxi ride. We can model each transaction as a tuple (x, y, z) which means person x gave person y $z. Assuming Alice, Bill, and Chris are person</description>
    </item>
    
    <item>
      <title>Leetcode 30 Substring with Concatenation of All Words 解题报告</title>
      <link>https://snowan.github.io/post/lc30/</link>
      <pubDate>Tue, 11 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/lc30/</guid>
      <description>Leetcode 30 Substring with Concatenation of All Words 解题报告 题目 (Problem) You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters. Example 1: Input: s = &amp;quot;barfoothefoobarman&amp;quot;, words = [&amp;quot;foo&amp;quot;,&amp;quot;bar&amp;quot;] Output: [0,9] Explanation:</description>
    </item>
    
    <item>
      <title>Leetcode 149 Max Points on a Line解题报告</title>
      <link>https://snowan.github.io/post/lc149/</link>
      <pubDate>Sat, 08 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/lc149/</guid>
      <description>Leetcode 149 Max Points on a Line解题报告 Problem Given n points on a 2D plane, find the maximum number of points that lie on the same straight line. Example 1: Input: [[1,1],[2,2],[3,3]] Output: 3 Explanation: ^ | | o | o | o +-------------&amp;gt; 0 1 2 3 4 Example 2: Input: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]] Output: 4 Explanation: ^ | | o | o o</description>
    </item>
    
    <item>
      <title>Leetcode 132 Palindrome Partitioning II 解题报告</title>
      <link>https://snowan.github.io/post/lc132/</link>
      <pubDate>Wed, 05 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/lc132/</guid>
      <description>Leetcode 132 Palindrome Partitioning II 解题报告 Question: Given a string s, partition s such that every substring of the partition is a palindrome. Return the minimum cuts needed for a palindrome partitioning of s. Example: Input: &amp;quot;aab&amp;quot; Output: 1 Explanation: The palindrome partitioning [&amp;quot;aa&amp;quot;,&amp;quot;b&amp;quot;] could be produced using 1 cut. Solution: Approach #1: DP dp[i][j] - min cut substring from i to j init</description>
    </item>
    
    <item>
      <title>Leetcode 792 Number of Matching Subsequences 的解题报告</title>
      <link>https://snowan.github.io/post/lc792/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/lc792/</guid>
      <description>Question Given string S and a dictionary of words words, find the number of words[i] that is a subsequence of S. Example : Input: S = &amp;quot;abcde&amp;quot; words = [&amp;quot;a&amp;quot;, &amp;quot;bb&amp;quot;, &amp;quot;acd&amp;quot;, &amp;quot;ace&amp;quot;] Output: 3 Explanation: There are three words in words that are a subsequence of S: &amp;quot;a&amp;quot;, &amp;quot;acd&amp;quot;, &amp;quot;ace&amp;quot;. Note: All words in words and S will only consists of lowercase letters. The length of S will be</description>
    </item>
    
    <item>
      <title>创建和发布第一个Hugo site 到你的 Github pages</title>
      <link>https://snowan.github.io/post/hugo-to-github/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/hugo-to-github/</guid>
      <description>这篇文章将要带你一步一步创建第一个Hugo静态网页, 并发布到Github pages. 安装 Hugo 快速安装 hugo Homebrew 安装(macOS) brew install hugo 更多其他OS安装请查看 Hugo</description>
    </item>
    
    <item>
      <title>MySQL Index: Unique Index</title>
      <link>https://snowan.github.io/post/mysql-unique-index/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/mysql-unique-index/</guid>
      <description>MySQL index: Unique Index What is Unique Index? In MySql, if we want to enfore uniqueness column or keys, we usually use Primary Key constraints, but one table only can have one PK. Luckily, in MySQL, it allowed to add multiple unique columns using UNIQUE (), for example: CREATE TABLE user( id int NOT NULL AUTO PRIMAEY KEY, name varchar(50), username varchar(50), phone varchar(50) NOT NULL, email varchar(100) NOT NULL,</description>
    </item>
    
    <item>
      <title></title>
      <link>https://snowan.github.io/top/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/top/about/</guid>
      <description>Welcome to Snowan blog.
Yeah, finally started!!!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://snowan.github.io/top/books/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/top/books/</guid>
      <description>Coursera 在线课程 Machine learning 笔记 讲师: 吴恩达(Andrew Ng)  课程地址：https://www.coursera.org/learn/machine-learning</description>
    </item>
    
  </channel>
</rss>