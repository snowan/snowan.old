<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on Snowan Blog</title>
    <link>https://snowan.github.io/tags/algorithm/</link>
    <description>Recent content in algorithm on Snowan Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://snowan.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>460 LFU Cache 解题报告</title>
      <link>https://snowan.github.io/post/460.lfu-cache/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/460.lfu-cache/</guid>
      <description>题目地址 Problem 题目描述 Design and implement a data structure for Least Frequently Used (LFU) cache. It should support the following operations: get and put. get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. put(key, value) - Set or insert the value if the key is not already present. When the cache</description>
    </item>
    
    <item>
      <title>二叉树遍历(Binary Tree Traversal)-先序,中序,后序,层级遍历</title>
      <link>https://snowan.github.io/post/tree-traversal/</link>
      <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/tree-traversal/</guid>
      <description>二叉树遍历(Binary Tree Traversal) - 先序, 中序, 后序, 层级遍历 与那些基本上都有标准遍历方式的线性数据结构(如链表, 一维数组)不同的是, 树结构有多种</description>
    </item>
    
    <item>
      <title>并查集(Union Find Algorithm)</title>
      <link>https://snowan.github.io/post/union-find/</link>
      <pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/union-find/</guid>
      <description>并查集 (Union Find) 算法 这几天重温一下union-find算法, 重温 《算法》(Algorithms) 这本书union find 一小节, 写一篇学习笔记, 然后结合</description>
    </item>
    
    <item>
      <title>Leetcode 792 Number of Matching Subsequences 的解题报告</title>
      <link>https://snowan.github.io/post/lc792/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://snowan.github.io/post/lc792/</guid>
      <description>Question Given string S and a dictionary of words words, find the number of words[i] that is a subsequence of S. Example : Input: S = &amp;quot;abcde&amp;quot; words = [&amp;quot;a&amp;quot;, &amp;quot;bb&amp;quot;, &amp;quot;acd&amp;quot;, &amp;quot;ace&amp;quot;] Output: 3 Explanation: There are three words in words that are a subsequence of S: &amp;quot;a&amp;quot;, &amp;quot;acd&amp;quot;, &amp;quot;ace&amp;quot;. Note: All words in words and S will only consists of lowercase letters. The length of S will be</description>
    </item>
    
  </channel>
</rss>